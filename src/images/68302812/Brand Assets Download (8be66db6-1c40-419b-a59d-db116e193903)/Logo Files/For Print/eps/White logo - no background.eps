%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 849
%%HiResBoundingBox: 0 0 2391.1199 848.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 848.88 re
W
q
[0.24 0 0 -0.24 0 848.88] cm
q
0 0 9962.5 3537.5 re
W*
q
[0.0515225 0 0 0.051525 212.40277 224.65434] cm
/DeviceRGB {} CS
[0.0275 0.102 0.3216] SC
/DeviceRGB {} cs
[0.0275 0.102 0.3216] sc
42644 14489 m
42142 13977 41808 13691 41344 13535 c
40849 13369 40165 13322 38971 13294 c
38213 13276 37460 13116 36754 12814 c
36071 12522 35433 12098 34879 11544 c
33710 10375 33126 8844 33126 7312 c
33126 5780 33710 4249 34879 3080 c
36048 1911 37579 1327 39111 1327 c
40643 1327 42174 1911 43343 3080 c
43897 3634 44321 4273 44613 4955 c
44915 5661 45075 6414 45093 7172 c
45121 8356 45167 9038 45331 9535 c
45484 9999 45764 10330 46263 10821 c
46397 10953 46530 11084 46663 11214 c
47367 11906 48062 12590 48754 13306 c
49326 13899 49677 14229 50151 14405 c
50650 14590 51340 14640 52591 14669 c
53349 14687 54102 14847 54808 15149 c
55491 15441 56129 15865 56683 16419 c
57852 17588 58436 19119 58436 20651 c
58436 22183 57852 23714 56683 24883 c
55514 26052 53983 26636 52451 26636 c
52451 26634 l
52092 26634 51732 26602 51378 26538 c
51363 26536 51348 26534 51333 26531 c
50306 26305 47905 26499 44895 27130 c
42354 27663 39397 28507 36480 29673 c
36213 29780 35859 29916 35460 30071 c
31581 31571 23146 34832 23002 38682 c
22995 38869 22976 39053 22956 39249 c
22953 39280 22950 39311 22947 39343 c
22963 39943 23053 40514 23266 41049 c
23663 42048 24503 42960 26121 43766 c
28236 44818 30788 45873 33048 46491 c
34843 46982 36440 47200 37454 46918 c
38183 46716 38950 46651 39714 46735 c
40449 46817 41182 47037 41875 47408 c
43333 48188 44337 49485 44780 50950 c
45223 52415 45108 54049 44327 55507 c
43547 56965 42250 57969 40785 58412 c
39320 58855 37686 58740 36228 57959 c
35534 57587 34943 57100 34468 56533 c
33974 55944 33602 55270 33366 54550 c
32951 53286 31889 51879 30499 50507 c
28873 48902 26810 47357 24797 46138 c
24340 45861 23867 45656 23384 45514 c
22876 45365 22358 45286 21836 45268 c
20832 45234 19888 45422 18972 45729 c
18492 45890 18018 46085 17546 46300 c
15981 47201 14166 47717 12231 47717 c
9286 47717 6619 46523 4689 44593 c
2759 42663 1565 39996 1565 37051 c
1565 34106 2759 31439 4689 29509 c
6619 27579 9286 26385 12231 26385 c
14812 26385 17179 27302 19024 28828 c
19430 29115 19827 29365 20256 29567 c
20691 29771 21164 29929 21721 30030 c
24936 30615 29674 29690 34159 28036 c
38886 26292 43305 23747 45338 21315 c
45683 20902 45951 20395 46106 19857 c
46248 19361 46293 18844 46209 18358 c
46064 17966 45820 17663 45417 17257 c
45023 16860 44627 16467 44230 16073 c
43700 15547 43170 15021 42645 14486 c
42644 14489 l
h
41929 54925 m
42027 54827 42185 54827 42283 54925 c
42381 55023 42381 55181 42283 55279 c
42280 55282 l
41532 56099 40524 56537 39497 56586 c
38466 56635 37416 56291 36591 55541 c
36583 55533 l
36485 55435 36485 55277 36583 55179 c
36681 55081 36839 55081 36937 55179 c
37658 55830 38574 56130 39474 56087 c
40373 56044 41257 55660 41913 54943 c
41918 54937 41924 54930 41930 54924 c
41929 54925 l
h
54881 18012 m
54783 17914 54783 17756 54881 17658 c
54979 17560 55137 17560 55235 17658 c
56023 18446 56417 19479 56417 20511 c
56417 21544 56023 22576 55235 23364 c
55137 23462 54979 23462 54881 23364 c
54783 23266 54783 23108 54881 23010 c
55571 22320 55916 21415 55916 20510 c
55916 19605 55571 18701 54881 18010 c
54881 18012 l
h
5110 36497 m
5110 36635 4998 36747 4860 36747 c
4722 36747 4610 36635 4610 36497 c
4610 34423 5450 32546 6809 31187 c
8168 29828 10045 28988 12119 28988 c
12257 28988 12369 29100 12369 29238 c
12369 29376 12257 29488 12119 29488 c
10183 29488 8431 30273 7163 31541 c
5895 32809 5110 34562 5110 36497 c
h
22345 40804 m
22308 40787 22274 40765 22244 40738 c
21705 42201 20855 43514 19774 44595 c
19737 44632 19700 44668 19663 44704 c
20369 44537 21097 44448 21861 44474 c
22452 44494 23036 44582 23609 44751 c
24153 44911 24688 45144 25209 45460 c
27274 46711 29390 48295 31058 49942 c
32533 51398 33667 52912 34125 54307 c
34329 54929 34651 55513 35080 56024 c
35493 56516 36004 56939 36603 57259 c
37865 57934 39282 58034 40553 57649 c
41824 57264 42948 56396 43623 55134 c
44298 53872 44398 52455 44013 51184 c
43628 49913 42760 48789 41498 48114 c
40898 47793 40263 47602 39624 47531 c
38961 47457 38295 47514 37664 47689 c
36500 48012 34758 47788 32836 47262 c
30514 46627 27910 45553 25762 44484 c
23946 43580 22990 42522 22523 41345 c
22452 41167 22393 40987 22344 40805 c
22345 40804 l
h
15891 46219 m
16312 46006 16734 45798 17159 45603 c
17910 45169 18598 44639 19207 44030 c
20992 42245 22097 39778 22097 37054 c
22097 34330 20993 31863 19207 30078 c
17422 28293 14955 27188 12231 27188 c
9507 27188 7040 28292 5255 30078 c
3470 31863 2365 34330 2365 37054 c
2365 39778 3469 42245 5255 44030 c
7040 45815 9507 46920 12231 46920 c
13524 46920 14759 46671 15891 46219 c
h
49211 25686 m
48859 25459 48526 25192 48218 24884 c
47664 24330 47240 23691 46948 23009 c
46679 22382 46523 21716 46480 21044 c
46328 21326 46150 21591 45950 21830 c
43829 24368 39279 27001 34434 28789 c
29834 30486 24943 31430 21581 30818 c
21278 30763 20996 30693 20730 30609 c
22011 32296 22802 34375 22889 36636 c
25053 33242 31783 30639 35171 29329 c
35546 29184 35877 29056 36181 28934 c
39145 27749 42149 26891 44731 26350 c
46449 25990 47988 25770 49211 25686 c
h
51357 25723 m
51408 25732 51457 25741 51503 25751 c
51509 25752 51515 25754 51521 25755 c
51828 25811 52139 25839 52450 25839 c
52450 25837 l
53777 25837 55104 25331 56116 24318 c
57128 23306 57635 21979 57635 20652 c
57635 19325 57129 17998 56116 16986 c
55633 16503 55081 16136 54494 15885 c
53880 15622 53227 15483 52574 15468 c
51231 15437 50476 15379 49872 15154 c
49243 14920 48833 14539 48178 13861 c
47492 13151 46802 12472 46103 11785 c
45970 11654 45837 11523 45703 11392 c
45111 10809 44775 10404 44571 9787 c
44378 9203 44325 8460 44295 7189 c
44280 6536 44141 5883 43878 5269 c
43626 4681 43259 4129 42777 3647 c
41765 2635 40438 2128 39111 2128 c
37784 2128 36457 2634 35445 3647 c
34433 4659 33926 5986 33926 7313 c
33926 8640 34432 9967 35445 10979 c
35928 11462 36480 11829 37067 12080 c
37681 12343 38334 12482 38987 12497 c
40265 12527 41009 12581 41598 12778 c
42218 12986 42623 13327 43213 13929 c
43737 14463 44264 14986 44791 15509 c
45188 15903 45585 16298 45981 16696 c
46476 17195 46775 17575 46965 18111 c
46969 18121 46972 18130 46975 18140 c
46987 18176 46999 18212 47010 18249 c
47186 18825 47236 19557 47264 20775 c
47279 21428 47418 22081 47681 22695 c
47933 23283 48300 23835 48782 24317 c
49515 25050 50413 25518 51355 25721 c
51357 25723 l
h
f
Q
q
[131.072876 0 0 131.079453 3625.6943 67.237274] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
8.78 10.34 m
8.759999 11.62 8.58 12.9 7.32 13.84 c
6.26 14.66 4.94 14.480001 3.68 14.480001 c
3.68 19.560001 l
3.68 20.160002 1.4 20.160002 1.4 19.560001 c
1.4 7.260001 l
1.4 6.320001 1.42 6.020001 2.82 6.000001 c
4.88 6.000001 l
5.599999 6.000001 6.4 6.020001 7.02 6.420001 c
8.379999 7.280001 8.799999 8.800001 8.78 10.340001 c
8.78 10.34 l
h
6.5 10.76 m
6.52 10.54 6.52 9.74 6.48 9.360001 c
6.4 8.620001 6.12 8.240001 5.2 8.240001 c
3.68 8.240001 l
3.68 12.200001 l
5.4 12.200001 l
6.32 12.200001 6.46 11.080001 6.5 10.76 c
6.5 10.76 l
h
18.379999 18.860001 m
18.799999 19.860001 16.56 20.34 16.299999 19.74 c
16.179998 19.459999 l
15.519999 17.879999 14.799998 16.079998 14.139998 14.48 c
13.159998 14.48 l
13.159998 19.559999 l
13.159998 20.16 10.879998 20.16 10.879998 19.559999 c
10.879998 7.259999 l
10.879998 6.319999 10.899999 6.02 12.299998 5.999999 c
14.359999 5.999999 l
15.079999 5.999999 15.879999 6.019999 16.499998 6.419999 c
17.859999 7.279999 18.279999 8.799999 18.259998 10.339999 c
18.239998 11.619999 18.059998 12.9 16.799999 13.839999 c
16.66 13.919999 16.539999 13.999999 16.42 14.079999 c
17.059999 15.599999 17.76 17.339998 18.380001 18.859999 c
18.379999 18.860001 l
h
13.16 12.2 m
14.88 12.2 l
15.8 12.2 15.940001 11.08 15.980001 10.76 c
16 10.54 16 9.74 15.96 9.360001 c
15.88 8.620001 15.6 8.240001 14.68 8.240001 c
13.16 8.240001 l
13.16 12.200001 l
13.16 12.2 l
h
21.24 19.559999 m
21.24 6.419999 l
21.24 5.819999 23.52 5.819999 23.52 6.419999 c
23.52 19.559999 l
23.52 20.16 21.24 20.16 21.24 19.559999 c
h
37.720001 6.76 m
37.720001 19.560001 l
37.720001 20.160002 35.460003 20.160002 35.460003 19.560001 c
35.460003 12.920002 l
33.140003 19.380001 33.100002 19.460003 33.060001 19.540001 c
32.800003 20.140001 31.280001 20.140001 31.02 19.540001 c
30.98 19.460001 30.940001 19.380001 28.6 12.840001 c
28.6 19.560001 l
28.6 20.160002 26.32 20.160002 26.32 19.560001 c
26.32 6.800001 l
26.32 6.760001 l
26.32 5.780001 28.34 5.820001 28.539999 6.360001 c
32.040001 15.560001 l
35.48 6.360002 l
35.68 5.820002 37.720001 5.760002 37.720001 6.760002 c
37.720001 6.76 l
h
42.799999 17.719999 m
45.66 17.719999 l
46.259998 17.719999 46.259998 20 45.66 20 c
41.799999 20 l
40.52 20 40.52 20 40.52 18.92 c
40.52 7.08 l
40.52 6 40.52 6 41.740002 5.98 c
45.640003 6 l
46.240002 6 46.240002 8.28 45.640003 8.28 c
42.800003 8.28 l
42.800003 11.92 l
44.800003 11.92 l
45.400002 11.92 45.400002 14.22 44.800003 14.22 c
42.800003 14.22 l
42.800003 17.720001 l
42.799999 17.719999 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
